diff -ruN a/kernel/common/inc/nv.h b/kernel/common/inc/nv.h
--- a/kernel/common/inc/nv.h	2020-01-23 08:18:47.808433310 +0100
+++ b/kernel/common/inc/nv.h	2020-01-23 08:51:59.399408477 +0100
@@ -647,31 +647,31 @@
 
 #define NV_TIMERCMP(a, b, CMP)                                              \
     (((a)->tv_sec == (b)->tv_sec) ?                                         \
-        ((a)->tv_usec CMP (b)->tv_usec) : ((a)->tv_sec CMP (b)->tv_sec))
+        ((a)->tv_nsec CMP (b)->tv_nsec) : ((a)->tv_sec CMP (b)->tv_sec))
 
 #define NV_TIMERADD(a, b, result)                                           \
     {                                                                       \
         (result)->tv_sec = (a)->tv_sec + (b)->tv_sec;                       \
-        (result)->tv_usec = (a)->tv_usec + (b)->tv_usec;                    \
-        if ((result)->tv_usec >= 1000000)                                   \
+        (result)->tv_nsec = (a)->tv_nsec + (b)->tv_nsec;                    \
+        if ((result)->tv_nsec >= NSEC_PER_SEC)                              \
         {                                                                   \
             ++(result)->tv_sec;                                             \
-            (result)->tv_usec -= 1000000;                                   \
+            (result)->tv_nsec -= NSEC_PER_SEC;                              \
         }                                                                   \
     }
 
 #define NV_TIMERSUB(a, b, result)                                           \
     {                                                                       \
         (result)->tv_sec = (a)->tv_sec - (b)->tv_sec;                       \
-        (result)->tv_usec = (a)->tv_usec - (b)->tv_usec;                    \
-        if ((result)->tv_usec < 0)                                          \
+        (result)->tv_nsec = (a)->tv_nsec - (b)->tv_nsec;                    \
+        if ((result)->tv_nsec < 0)                                          \
         {                                                                   \
           --(result)->tv_sec;                                               \
-          (result)->tv_usec += 1000000;                                     \
+          (result)->tv_nsec += NSEC_PER_SEC;                                \
         }                                                                   \
     }
 
-#define NV_TIMEVAL_TO_US(tv)    ((NvU64)(tv).tv_sec * 1000000 + (tv).tv_usec)
+#define NV_TIMEVAL_TO_US(tv)    ((NvU64)(tv).tv_sec * USEC_PER_SEC + (tv).tv_nsec/NSEC_PER_USEC)
 
 #ifndef NV_ALIGN_UP
 #define NV_ALIGN_UP(v,g) (((v) + ((g) - 1)) & ~((g) - 1))
diff -ruN a/kernel/conftest.sh b/kernel/conftest.sh
--- a/kernel/conftest.sh	2020-01-23 08:18:47.828432814 +0100
+++ b/kernel/conftest.sh	2020-01-23 08:59:59.120472929 +0100
@@ -1178,6 +1178,21 @@
             compile_check_conftest "$CODE" "NV_DRM_AVAILABLE" "" "generic"
         ;;
 
+        drm_dev_put)
+            #
+            # Determine if drm_dev_put() is present.
+            #
+            CODE="
+            #if defined(NV_DRM_DRMP_H_PRESENT)
+            #include <drm/drmP.h>
+            #endif
+            void conftest_drm_dev_put(void) {
+                drm_dev_put();
+            }"
+
+            compile_checkconftest "$CODE" "NV_DRM_DEV_PUT_PRESENT" "" "functions"
+        ;;
+
         drm_dev_unref)
             #
             # Determine if drm_dev_unref() is present.
diff -ruN a/kernel/nvidia/linux_nvswitch.c b/kernel/nvidia/linux_nvswitch.c
--- a/kernel/nvidia/linux_nvswitch.c	2020-01-23 08:18:47.818433061 +0100
+++ b/kernel/nvidia/linux_nvswitch.c	2020-01-23 11:38:36.629019623 +0100
@@ -1578,10 +1578,10 @@
     void
 )
 {
-    struct timespec ts;
+    struct timespec64 ts;
 
-    getnstimeofday(&ts);
-    return ((NvU64) timespec_to_ns(&ts));
+    ktime_get_real_ts64(&ts);
+    return ((NvU64) timespec64_to_ns(&ts));
 }
 
 void
diff -ruN a/kernel/nvidia/nvlink_linux.c b/kernel/nvidia/nvlink_linux.c
--- a/kernel/nvidia/nvlink_linux.c	2020-01-23 08:18:47.828432814 +0100
+++ b/kernel/nvidia/nvlink_linux.c	2020-01-23 11:33:22.385688864 +0100
@@ -29,7 +29,6 @@
 #include "nvlink_export.h"
 #include "nv-linux.h"
 #include "nv-procfs.h"
-#include "nv-time.h"
 
 #include <linux/module.h>
 #include <linux/major.h>
@@ -513,43 +512,43 @@
 
 static NvBool nv_timer_less_than
 (
-    const struct timeval *a,
-    const struct timeval *b
+    const struct timespec64 *a,
+    const struct timespec64 *b
 )
 {
-    return (a->tv_sec == b->tv_sec) ? (a->tv_usec < b->tv_usec) 
+    return (a->tv_sec == b->tv_sec) ? (a->tv_nsec < b->tv_nsec) 
                                     : (a->tv_sec < b->tv_sec);
 }
 
 static void nv_timeradd
 (
-    const struct timeval    *a,
-    const struct timeval    *b,
-    struct timeval          *result
+    const struct timespec64    *a,
+    const struct timespec64    *b,
+    struct timespec64          *result
 )
 {
     result->tv_sec = a->tv_sec + b->tv_sec;
-    result->tv_usec = a->tv_usec + b->tv_usec;
-    while (result->tv_usec >= 1000000)
+    result->tv_nsec = a->tv_nsec + b->tv_nsec;
+    while (result->tv_nsec >= NSEC_PER_SEC)
     {
         ++result->tv_sec;
-        result->tv_usec -= 1000000;
+        result->tv_nsec -= NSEC_PER_SEC;
     }
 }
 
 static void nv_timersub
 (
-    const struct timeval    *a,
-    const struct timeval    *b,
-    struct timeval          *result
+    const struct timespec64    *a,
+    const struct timespec64    *b,
+    struct timespec64          *result
 )
 {
     result->tv_sec = a->tv_sec - b->tv_sec;
-    result->tv_usec = a->tv_usec - b->tv_usec;
-    while (result->tv_usec < 0)
+    result->tv_nsec = a->tv_nsec - b->tv_nsec;
+    while (result->tv_nsec < 0)
     {
         --(result->tv_sec);
-        result->tv_usec += 1000000;
+        result->tv_nsec += NSEC_PER_SEC;
     }
 }
 
@@ -561,9 +560,9 @@
     unsigned long us;
     unsigned long jiffies;
     unsigned long mdelay_safe_msec;
-    struct timeval tm_end, tm_aux;
+    struct timespec64 ts_end, ts_aux;
 
-    nv_gettimeofday(&tm_aux);
+    ktime_get_real_ts64(&ts_aux);
 
     if (in_irq() && (ms > NV_MAX_ISR_DELAY_MS))
     {
@@ -577,9 +576,9 @@
     }
 
     us = ms * 1000;
-    tm_end.tv_usec = us;
-    tm_end.tv_sec = 0;
-    nv_timeradd(&tm_aux, &tm_end, &tm_end);
+    ts_end.tv_nsec = us*NSEC_PER_SEC;
+    ts_end.tv_sec = 0;
+    nv_timeradd(&ts_aux, &ts_end, &ts_end);
 
     /* do we have a full jiffie to wait? */
     jiffies = NV_USECS_TO_JIFFIES(us);
@@ -596,11 +595,11 @@
         do
         {
             schedule_timeout(jiffies);
-            nv_gettimeofday(&tm_aux);
-            if (nv_timer_less_than(&tm_aux, &tm_end))
+            ktime_get_real_ts64(&ts_aux);
+            if (nv_timer_less_than(&ts_aux, &ts_end))
             {
-                nv_timersub(&tm_end, &tm_aux, &tm_aux);
-                us = tm_aux.tv_usec + tm_aux.tv_sec * 1000000;
+                nv_timersub(&ts_end, &ts_aux, &ts_aux);
+                us = ts_aux.tv_nsec/NSEC_PER_SEC + ts_aux.tv_sec * USEC_PER_SEC;
             }
             else
             {
@@ -612,7 +611,7 @@
 
     if (us > 1000)
     {
-        mdelay_safe_msec = us / 1000;
+        mdelay_safe_msec = us / USEC_PER_MSEC;
         mdelay(mdelay_safe_msec);
         us %= 1000;
     }
diff -ruN a/kernel/nvidia/os-interface.c b/kernel/nvidia/os-interface.c
--- a/kernel/nvidia/os-interface.c	2020-01-23 08:27:55.896068822 +0100
+++ b/kernel/nvidia/os-interface.c	2020-01-23 11:32:53.226299607 +0100
@@ -14,14 +14,6 @@
 #include "os-interface.h"
 #include "nv-linux.h"
 
-#include "nv-time.h"
-
-
-
-
-
-
-
 extern char *NVreg_TemporaryFilePath;
 
 #define MAX_ERROR_STRING 512
@@ -463,12 +455,12 @@
     NvU32 *useconds
 )
 {
-    struct timeval tm;
+    struct timespec64 ts;
 
-    nv_gettimeofday(&tm);
+    ktime_get_real_ts64(&ts);
 
-    *seconds = tm.tv_sec;
-    *useconds = tm.tv_usec;
+    *seconds = ts.tv_sec;
+    *useconds = ((uint64_t)(ts.tv_nsec / NSEC_PER_USEC));
 
     return NV_OK;
 }
@@ -549,9 +541,9 @@
     unsigned long usec;
 
 #ifdef NV_CHECK_DELAY_ACCURACY
-    struct timeval tm1, tm2;
+    struct timespec64 ts1, ts2;
 
-    nv_gettimeofday(&tm1);
+    ktime_get_real_ts64(&ts1);
 #endif
 
     if (in_irq() && (MicroSeconds > NV_MAX_ISR_DELAY_US))
@@ -566,9 +558,9 @@
         udelay(usec);
 
 #ifdef NV_CHECK_DELAY_ACCURACY
-    nv_gettimeofday(&tm2);
+    ktime_get_real_ts64(&ts2);
     nv_printf(NV_DBG_ERRORS, "NVRM: osDelayUs %d: 0x%x 0x%x\n",
-        MicroSeconds, tm2.tv_sec - tm1.tv_sec, tm2.tv_usec - tm1.tv_usec);
+        MicroSeconds, ts2.tv_sec - ts1.tv_sec, ts2.tv_nsec - ts1.tv_nsec / NSEC_PER_USEC);
 #endif
 
     return NV_OK;
@@ -589,14 +581,14 @@
     unsigned long MicroSeconds;
     unsigned long jiffies;
     unsigned long mdelay_safe_msec;
-    struct timeval tm_end, tm_aux;
+    struct timespec64 ts_end, ts_aux;
 #ifdef NV_CHECK_DELAY_ACCURACY
-    struct timeval tm_start;
+    struct timespec64 ts_start;
 #endif
 
-    nv_gettimeofday(&tm_aux);
+    ktime_get_real_ts64(&ts_aux);
 #ifdef NV_CHECK_DELAY_ACCURACY
-    tm_start = tm_aux;
+    ts_start = ts_aux;
 #endif
 
     if (in_irq() && (MilliSeconds > NV_MAX_ISR_DELAY_MS))
@@ -608,10 +600,10 @@
         return NV_OK;
     }
 
-    MicroSeconds = MilliSeconds * 1000;
-    tm_end.tv_usec = MicroSeconds;
-    tm_end.tv_sec = 0;
-    NV_TIMERADD(&tm_aux, &tm_end, &tm_end);
+    MicroSeconds = MilliSeconds * USEC_PER_MSEC;
+    ts_end.tv_nsec = MicroSeconds * NSEC_PER_USEC;
+    ts_end.tv_sec = 0;
+    NV_TIMERADD(&ts_aux, &ts_end, &ts_end);
 
     /* do we have a full jiffie to wait? */
     jiffies = NV_USECS_TO_JIFFIES(MicroSeconds);
@@ -628,11 +620,11 @@
         do
         {
             schedule_timeout(jiffies);
-            nv_gettimeofday(&tm_aux);
-            if (NV_TIMERCMP(&tm_aux, &tm_end, <))
+            ktime_get_real_ts64(&ts_aux);
+            if (NV_TIMERCMP(&ts_aux, &ts_end, <))
             {
-                NV_TIMERSUB(&tm_end, &tm_aux, &tm_aux);
-                MicroSeconds = tm_aux.tv_usec + tm_aux.tv_sec * 1000000;
+                NV_TIMERSUB(&ts_end, &ts_aux, &ts_aux);
+                MicroSeconds = ts_aux.tv_nsec/NSEC_PER_USEC + ts_aux.tv_sec * USEC_PER_SEC;
             }
             else
                 MicroSeconds = 0;
@@ -650,10 +642,10 @@
         udelay(MicroSeconds);
     }
 #ifdef NV_CHECK_DELAY_ACCURACY
-    nv_gettimeofday(&tm_aux);
-    timersub(&tm_aux, &tm_start, &tm_aux);
+    ktime_get_real_ts64(&ts_aux);
+    timersub(&ts_aux, &ts_start, &ts_aux);
     nv_printf(NV_DBG_ERRORS, "NVRM: osDelay %dmsec: %d.%06dsec\n",
-        MilliSeconds, tm_aux.tv_sec, tm_aux.tv_usec);
+        MilliSeconds, ts_aux.tv_sec, ts_aux.tv_nsec/NSEC_PER_USEC);
 #endif
 
     return NV_OK;
@@ -1954,11 +1946,11 @@
 {
     struct ipmi_recv_msg    *rx_msg;
     int                     err_no;
-    struct timeval          tv;
+    struct timespec64       ts;
     NvU64                   start_time;
 
-    nv_gettimeofday(&tv);
-    start_time = NV_TIMEVAL_TO_US(tv);
+    ktime_get_real_ts64(&ts);
+    start_time = NV_TIMEVAL_TO_US(ts);
 
     err_no = -EAGAIN;
     do
@@ -1982,8 +1974,8 @@
 
         spin_unlock_irqrestore(&p_priv->msg_lock, flags);
         os_delay(NV_IPMI_SLEEP_MS);
-        nv_gettimeofday(&tv);
-    } while (NV_TIMEVAL_TO_US(tv) < (start_time + NV_IPMI_READ_TIMEOUT_US));
+        ktime_get_real_ts64(&ts);
+    } while (NV_TIMEVAL_TO_US(ts) < (start_time + NV_IPMI_READ_TIMEOUT_US));
 
     if (rx_msg != NULL)
     {
diff -ruN a/kernel/nvidia-modeset/nvidia-modeset-linux.c b/kernel/nvidia-modeset/nvidia-modeset-linux.c
--- a/kernel/nvidia-modeset/nvidia-modeset-linux.c	2020-01-23 08:18:47.808433310 +0100
+++ b/kernel/nvidia-modeset/nvidia-modeset-linux.c	2020-01-23 11:32:09.027231209 +0100
@@ -36,8 +36,6 @@
 #include "nv-procfs.h"
 #include "nv-kthread-q.h"
 
-#include "nv-time.h"
-
 #include <linux/sched.h>
 #if defined(NV_LINUX_SCHED_SIGNAL_H_PRESENT)
 #include <linux/sched/signal.h>
@@ -266,11 +264,11 @@
 
 NvU64 NVKMS_API_CALL nvkms_get_usec(void)
 {
-    struct timeval tv;
+    struct timespec64 ts;
 
-    nv_gettimeofday(&tv);
+    ktime_get_real_ts64(&ts);
 
-    return (((NvU64)tv.tv_sec) * 1000000) + tv.tv_usec;
+    return (((NvU64)ts.tv_sec) * 1000000) + ts.tv_nsec/NSEC_PER_USEC;
 }
 
 int NVKMS_API_CALL nvkms_copyin(void *kptr, NvU64 uaddr, size_t n)
diff -ruN a/kernel/nvidia-uvm/uvm_linux.h b/kernel/nvidia-uvm/uvm_linux.h
--- a/kernel/nvidia-uvm/uvm_linux.h	2020-01-23 08:18:47.808433310 +0100
+++ b/kernel/nvidia-uvm/uvm_linux.h	2020-01-23 11:33:50.135110408 +0100
@@ -35,8 +35,6 @@
 #include "nv-misc.h"
 #include "nvtypes.h"
 
-#include "nv-time.h"
-
 #define NV_BUILD_MODULE_INSTANCES 0
 #include "nv-linux.h"
 
@@ -299,23 +297,23 @@
 /* Return a nanosecond-precise value */
 static inline NvU64 NV_GETTIME(void)
 {
-    struct timespec ts = {0};
+    struct timespec64 ts = {0};
 
-    getrawmonotonic(&ts);
+    ktime_get_raw_ts64(&ts);
 
     /* Wraps around every 583 years */
-    return (ts.tv_sec * 1000000000ULL + ts.tv_nsec);
+    return (ts.tv_sec * NSEC_PER_SEC + ts.tv_nsec);
 }
 #else
 /* We can only return a microsecond-precise value with the
  * available non-GPL symbols. */
 static inline NvU64 NV_GETTIME(void)
 {
-    struct timeval tv = {0};
+    struct timespec64 ts = {0};
 
-    nv_gettimeofday(&tv);
+    ktime_get_real_ts64(&ts);
 
-    return (tv.tv_sec * 1000000000ULL + tv.tv_usec * 1000ULL);
+    return (ts.tv_sec * NSEC_PER_SEC + (ts.tv_nsec/NSEC_PER_USEC) * NSEC_PER_USEC);
 }
 #endif
 
